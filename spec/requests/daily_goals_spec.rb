require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/daily_goals', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # DailyGoal. As you add validations to DailyGoal, be sure to
  # adjust the attributes here as well.
  let(:account) { Account.create!(email: 'fake@example.com', password: 'password') }
  let(:valid_attributes) do
    {
      calorie_goal: 1000,
      carbs_goal: 100,
      protein_goal: 100,
      fat_goal: 100,
      sugar_goal: 20,
      account_id: account.id,
      date: Date.today + rand(365).days
    }
  end
  let(:daily_goal) { DailyGoal.create!(valid_attributes) }

  let(:invalid_attributes) do
    {
      invalid_field: 'hello world',
      protein_goal: 'string value'
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # DailyGoalsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:jwt_token) { JWT.encode({ account_id: account.id }, Rails.application.credentials.key, 'HS256') }
  let(:valid_headers) do
    {
      'Authorization': "Bearer #{jwt_token}",
      'Content-Type': 'application/json'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get daily_goals_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get daily_goal_url(daily_goal), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new DailyGoal' do
        expect do
          post daily_goals_url,
               params: { daily_goal: valid_attributes }, headers: valid_headers, as: :json
        end.to change(DailyGoal, :count).by(1)
      end

      it 'renders a JSON response with the new daily_goal' do
        post daily_goals_url,
             params: { daily_goal: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new DailyGoal' do
        expect do
          post daily_goals_url,
               params: { daily_goal: invalid_attributes }, as: :json
        end.to change(DailyGoal, :count).by(0)
      end

      it 'renders a JSON response with errors for the new daily_goal' do
        post daily_goals_url,
             params: { daily_goal: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          calorie_goal: 100,
          carbs_goal: 100
        }
      end

      it 'updates the requested daily_goal' do
        daily_goal = DailyGoal.create! valid_attributes
        patch daily_goal_url(daily_goal),
              params: { daily_goal: new_attributes }, headers: valid_headers, as: :json
        daily_goal.reload
        expect(daily_goal.calorie_goal).to eq(100)
        expect(daily_goal.carbs_goal).to eq(100)
      end

      it 'renders a JSON response with the daily_goal' do
        daily_goal = DailyGoal.create! valid_attributes
        patch daily_goal_url(daily_goal),
              params: { daily_goal: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the daily_goal' do
        daily_goal = DailyGoal.create! valid_attributes
        patch daily_goal_url(daily_goal),
              params: { daily_goal: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested daily_goal' do
      daily_goal = DailyGoal.create! valid_attributes
      expect do
        delete daily_goal_url(daily_goal), headers: valid_headers, as: :json
      end.to change(DailyGoal, :count).by(-1)
    end
  end
end
